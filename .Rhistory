makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
getCache <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
inv
getCache <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
inv
getCache <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
inv
}
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix <- createCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
## Caching the Inverse of a Matrix:
## The functions below create a special object that stores a matrix and caches its inverse.
## This function creates a special object that can cache its inverse.
createCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## This function computes the inverse of the special "matrix" object created by
## createCacheMatrix above. If the inverse was already calculated (and the
## matrix has not changed), then it should retrieve the inverse from the cache.
getCache <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
inv
}
my_matrix <- createCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix$getInverse()
## Caching the Inverse of a Matrix:
## The functions below create a special object that stores a matrix and caches its inverse.
## This function creates a special object that can cache its inverse.
createCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix
c <- 4+4
c
## Caching the Inverse of a Matrix:
## The functions below create a special object that stores a matrix and caches its inverse.
## This function creates a special object that can cache its inverse.
createCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
my_matrix <- createCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix$getInverse()
getCache(my_matrix)
getCache <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
inv
}
getCache(my_matrix)
my_matrix$getInverse()
my_matrix$set(matrix(c(2, 2, 1, 4), 2, 2))
getCache(my_matrix)
my_matrix$get()
> my_matrix$getInverse()
my_matrix$getInverse()
cacheSolve(my_matrix)
}
getCache(my_matrix)
my_matrix <- createCacheMatrix(matrix(3:6, 2, 2))
my_matrix <- createCacheMatrix(matrix(3:6, 2, 2))
## The functions below create a special object that stores a matrix and caches its inverse.
## This function creates a special object that can cache its inverse.
createCacheMatrix <- function(x = matrix()) {
## Initialize the inverse property
inv <- NULL
## Method to set the matrix
set <- function(y) {
x <<- y
inv <<- NULL
}
## Method the get the matrix
get <- function() x
## Method to set the inverse of the matrix
setInverse <- function(inverse) inv <<- inverse
## Method to get the inverse of the matrix
getInverse <- function() inv
## Return a list of the methods
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## This function computes the inverse of the special "matrix" object created by
## createCacheMatrix above. If the inverse was already calculated (and the
## matrix has not changed), then it should retrieve the inverse from the cache.
getCache <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
## Get the matrix from our object
mat <- x$get()
## Calculate the inverse using matrix multiplication
inv <- solve(mat, ...)
## Set the inverse to the object
x$setInverse(inv)
## Return the matrix
inv
}
createCacheMatrix <- function(x = matrix()) {
## Initialize the inverse property
inv <- NULL
## Method to set the matrix
set <- function(y) {
x <<- y
inv <<- NULL
}
## Method the get the matrix
get <- function() x
## Method to set the inverse of the matrix
setInverse <- function(inverse) inv <<- inverse
## Method to get the inverse of the matrix
getInverse <- function() inv
## Return a list of the methods
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## This function computes the inverse of the special "matrix" object created by
## createCacheMatrix above. If the inverse was already calculated (and the
## matrix has not changed), then it should retrieve the inverse from the cache.
getCache <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
## Get the matrix from our object
mat <- x$get()
## Calculate the inverse using matrix multiplication
inv <- solve(mat, ...)
## Set the inverse to the object
x$setInverse(inv)
## Return the matrix
inv
}
my_matrix <- createCacheMatrix(matrix(3:6, 2, 2))
my_matrix <- createCacheMatrix(matrix(3:6, 2, 2))
my_matrix <- createCacheMatrix(matrix(3:6, 2, 2))
my_matrix <- createCacheMatrix(matrix(3:6, 2, 2))
my_matrix <- createCacheMatrix(matrix(3:6, 2, 2))
createCacheMatrix <- function(x = matrix()) {
## Initialize the inverse property
inv <- NULL
## Method to set the matrix
set <- function(y) {
x <<- y
inv <<- NULL
}
## Method the get the matrix
get <- function() x
## Method to set the inverse of the matrix
setInverse <- function(inverse) inv <<- inverse
## Method to get the inverse of the matrix
getInverse <- function() inv
## Return a list of the methods
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
createCacheMatrix <- function(x = matrix()) {
## Initialize the inverse property
inv <- NULL
## Method to set the matrix
set <- function(y) {
x <<- y
inv <<- NULL
}
## Method the get the matrix
get <- function() x
## Method to set the inverse of the matrix
setInverse <- function(inverse) inv <<- inverse
## Method to get the inverse of the matrix
getInverse <- function() inv
## Return a list of the methods
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
createCacheMatrix <- function(x = matrix()) {
## Initialize the inverse property
inv <- NULL
## Method to set the matrix
set <- function(y) {
x <<- y
inv <<- NULL
}
## Method the get the matrix
get <- function() x
## Method to set the inverse of the matrix
setInverse <- function(inverse) inv <<- inverse
## Method to get the inverse of the matrix
getInverse <- function() inv
## Return a list of the methods
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
createCacheMatrix <- function(x = matrix()) {
## Initialize the inverse property
inv <- NULL
## Method to set the matrix
set <- function(y) {
x <<- y
inv <<- NULL
}
## Method the get the matrix
get <- function() x
## Method to set the inverse of the matrix
setInverse <- function(inverse) inv <<- inverse
## Method to get the inverse of the matrix
getInverse <- function() inv
## Return a list of the methods
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
createCacheMatrix <- function(x = matrix()) {
## Initialize the inverse property
inv <- NULL
## Method to set the matrix
set <- function(y) {
x <<- y
inv <<- NULL
}
## Method the get the matrix
get <- function() x
## Method to set the inverse of the matrix
setInverse <- function(inverse) inv <<- inverse
## Method to get the inverse of the matrix
getInverse <- function() inv
## Return a list of the methods
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
createCacheMatrix <- function(x = matrix()) {
## Initialize the inverse property
inv <- NULL
## Method to set the matrix
set <- function(y) {
x <<- y
inv <<- NULL
}
## Method the get the matrix
get <- function() x
## Method to set the inverse of the matrix
setInverse <- function(inverse) inv <<- inverse
## Method to get the inverse of the matrix
getInverse <- function() inv
## Return a list of the methods
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
my_matrix <- createCacheMatrix(matrix(3:6, 2, 2))
## The functions below create a special object that stores a matrix and caches its inverse.
## This function creates a special object that can cache its inverse.
createCacheMatrix <- function(x = matrix()) {
## Initialize the inverse property
inv <- NULL
## Method to set the matrix
set <- function(y) {
x <<- y
inv <<- NULL
}
## Method the get the matrix
get <- function() x
## Method to set the inverse of the matrix
setInverse <- function(inverse) inv <<- inverse
## Method to get the inverse of the matrix
getInverse <- function() inv
## Return a list of the methods
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## This function computes the inverse of the special "matrix" object created by
## createCacheMatrix above. If the inverse was already calculated (and the
## matrix has not changed), then it should retrieve the inverse from the cache.
getCache <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
## Get the matrix from our object
mat <- x$get()
## Calculate the inverse using matrix multiplication
inv <- solve(mat, ...)
## Set the inverse to the object
x$setInverse(inv)
## Return the matrix
inv
}
View(createCacheMatrix)
View(createCacheMatrix)
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
source("ProgrammingAssignment2/cachematrix.R")
source("cachematrix.R")
return(inv)
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
source("cachematrix.R")
makeCacheMatrix
source("cachematrix.R")
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
View(my_matrix)
